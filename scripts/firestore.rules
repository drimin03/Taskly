// Paste this into Firebase Console > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Public profiles â€” require auth to read; users write only their own profile
    match /users/{uid} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == uid;
      allow delete: if false;
    }

    // Projects collection - users can only read/write their own projects
    match /projects/{projectId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Tasks collection - users can only read/write their own tasks
    match /tasks/{taskId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Top-level invites between users
    match /invites/{inviteId} {
      allow read: if request.auth != null && (
        resource.data.fromUid == request.auth.uid ||
        resource.data.toUid == request.auth.uid
      );
      allow create: if request.auth != null && request.resource.data.fromUid == request.auth.uid;
      allow update, delete: if request.auth != null && (
        resource.data.fromUid == request.auth.uid ||
        resource.data.toUid == request.auth.uid
      );
    }

    // Rooms and messages
    match /rooms/{roomId} {
      // Allow create/update if the writer is a member in the NEW doc (no initial read required)
      allow create, update: if request.auth != null && request.auth.uid in request.resource.data.members;
      // Allow read/delete if the reader is a current member
      allow read, delete: if request.auth != null && request.auth.uid in resource.data.members;

      match /messages/{msgId} {
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/rooms/$(roomId)).data.members;
        allow create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/rooms/$(roomId)).data.members;
        allow update, delete: if false; // immutable
      }
    }
  }
}